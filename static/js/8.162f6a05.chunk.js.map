{"version":3,"sources":["pages/PokedexPage.js","components/NavBar.js","components/Wrapper.js","utils/backgroundConfig.js","utils/API.js"],"names":["PokedexPage","useState","rangePokemon","setRangePokemon","configs","defaultConfig","config","setConfig","history","useHistory","getRangeData","e","limit","offset","a","preventDefault","API","getPokemonRange","results","data","useEffect","theme","className","lg","drop","title","variant","id","Item","onClick","eventKey","map","poke","index","name","charAt","toUpperCase","slice","push","changePage","fixed","Collapse","Text","style","color","Date","getFullYear","href","NavBar","expand","Brand","Wrapper","options","module","exports","background","value","position","repeat","size","fullScreen","enable","zIndex","fpsLimit","particles","number","density","value_area","shape","type","stroke","width","polygon","nb_sides","image","src","height","opacity","random","anim","speed","opacity_min","sync","size_min","line_linked","distance","move","direction","straight","out_mode","bounce","attract","rotateX","rotateY","retina_detect","baseURL","getAllPokemon","axios","get","getPokemonData","url","getOnePokemon","query"],"mappings":"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","file":"static/js/8.162f6a05.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport API from \"../utils/API\";\r\nimport \"../style.css\";\r\nimport { Container, Row, Col, Button, Card, Table, Navbar, DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport NavBar from '../components/NavBar';\r\nimport Wrapper from \"../components/Wrapper\";\r\nimport configs from \"../utils/backgroundConfig\";\r\n\r\nexport default function PokedexPage() {\r\n\r\n    // State Management\r\n    const [rangePokemon, setRangePokemon] = useState([]);\r\n    const [config, setConfig] = useState(configs.defaultConfig);\r\n    const history = useHistory();\r\n\r\n    // Function to find all pokemon in a range\r\n    async function getRangeData(e, limit, offset) {\r\n        // Sets the current range Pokemon to 0.\r\n        if (e) e.preventDefault();\r\n        setRangePokemon([]);\r\n\r\n        // Gets the desired range of pokemon of the pokedex.\r\n        const results = await API.getPokemonRange(limit, offset);\r\n        setRangePokemon(results.data.results);\r\n    };\r\n\r\n    // Function to change to pokemon info page.\r\n    const changePage = (e, poke) => {\r\n        e.preventDefault();\r\n\r\n        // Pushes route into search bar.\r\n        history.push(`/info/${poke}`);\r\n    };\r\n\r\n    // Loads the first 100 pokemon when the page loads.\r\n    useEffect((e) => {\r\n        getRangeData(e, 100)\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <Wrapper config={config} setConfig={setConfig} />\r\n            <NavBar theme=\"default\" />\r\n            <Container>\r\n                <Row className=\"justify-content-md-center\">\r\n                    <Col lg=\"auto\" className=\"centerText\">\r\n                        <Card className=\"pokedexStyle\">\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <h1 className=\"pixelText white\"><u>Pokedex</u></h1>\r\n                                        <DropdownButton drop=\"down\" title=\"Pokedex Range\" variant=\"danger\" id=\"dropdown-basic-button\">\r\n                                            <Dropdown.Item onClick={(e) => getRangeData(e, 100)} eventKey=\"1\">1-100</Dropdown.Item>\r\n                                            <Dropdown.Item onClick={(e) => getRangeData(e, 100, 100)} eventKey=\"101\">101-200</Dropdown.Item>\r\n                                            <Dropdown.Item onClick={(e) => getRangeData(e, 100, 200)} eventKey=\"201\">201-300</Dropdown.Item>\r\n                                            <Dropdown.Item onClick={(e) => getRangeData(e, 100, 300)} eventKey=\"301\">301-400</Dropdown.Item>\r\n                                            <Dropdown.Item onClick={(e) => getRangeData(e, 100, 400)} eventKey=\"401\">401-500</Dropdown.Item>\r\n                                            <Dropdown.Item onClick={(e) => getRangeData(e, 100, 500)} eventKey=\"501\">501-600</Dropdown.Item>\r\n                                            <Dropdown.Item onClick={(e) => getRangeData(e, 100, 600)} eventKey=\"601\">601-700</Dropdown.Item>\r\n                                            <Dropdown.Item onClick={(e) => getRangeData(e, 100, 700)} eventKey=\"701\">701-800</Dropdown.Item>\r\n                                            <Dropdown.Item onClick={(e) => getRangeData(e, 98, 800)} eventKey=\"801\">801-898</Dropdown.Item>\r\n                                        </DropdownButton>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"defaultText tableScroll\">\r\n                                    <Col>\r\n                                        <Table className=\"white\">\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th>Name</th>\r\n                                                    <th>Info</th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                {rangePokemon.map((poke, index) => (\r\n                                                    <tr key={index}>\r\n                                                        <td><b>{poke.name.charAt(0).toUpperCase() + poke.name.slice(1)}</b></td>\r\n                                                        <td><Button variant=\"danger\" onClick={(e) => changePage(e, poke.name)}>More Info</Button></td>\r\n                                                    </tr>\r\n                                                ))}\r\n                                            </tbody>\r\n                                        </Table>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n            <Navbar fixed=\"bottom\" className=\"defaultText footerColor\">\r\n                <Navbar.Collapse className=\"justify-content-end\">\r\n                    <Navbar.Text style={{ color: \"white\" }}>\r\n                        &copy; {new Date().getFullYear()} Copyright: <a href=\"https://github.com/jmasone15\" style={{ color: \"white\" }}> Jordan Masone </a>\r\n                    </Navbar.Text>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Navbar } from 'react-bootstrap'\r\n\r\nexport default function NavBar() {\r\n    return (\r\n        <Navbar variant=\"dark\" expand=\"lg0\" className=\"defaultText footerColor\">\r\n            <Navbar.Brand href=\"/\">React Pokedex</Navbar.Brand>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\n// Red #E5383B\r\n// Dark Grey #495057\r\n// Light Grey #6c757d\r\n","import React from \"react\";\r\nimport Particles from \"react-tsparticles\";\r\n\r\nexport default function Wrapper({ config }) {\r\n\r\n    return (\r\n        <Particles id=\"tsparticles\" options={config} />\r\n    )\r\n}\r\n","// Configs for the moving background\r\nconst configs = {\r\n    defaultConfig: {\r\n        background: {\r\n            color: {\r\n                value: \"#495057\"\r\n            },\r\n            position: \"50% 50%\",\r\n            repeat: \"no-repeat\",\r\n            size: \"cover\"\r\n        },\r\n        fullScreen: {\r\n            enable: true,\r\n            zIndex: -1\r\n        },\r\n        fpsLimit: 60,\r\n        particles: {\r\n            number: {\r\n                value: 60,\r\n                density: {\r\n                    enable: true,\r\n                    value_area: 1000\r\n                }\r\n            },\r\n            color: {\r\n                value: [\"#e63946\", \"#ffffff\"]\r\n            },\r\n            shape: {\r\n                type: \"edge\",\r\n                stroke: {\r\n                    width: 0,\r\n                    color: \"#000000\"\r\n                },\r\n                polygon: {\r\n                    nb_sides: 5\r\n                },\r\n                image: {\r\n                    src: \"img/github.svg\",\r\n                    width: 100,\r\n                    height: 100\r\n                }\r\n            },\r\n            opacity: {\r\n                value: 0.5,\r\n                random: false,\r\n                anim: {\r\n                    enable: false,\r\n                    speed: 1,\r\n                    opacity_min: 0.1,\r\n                    sync: false\r\n                }\r\n            },\r\n            size: {\r\n                value: 4,\r\n                random: true,\r\n                anim: {\r\n                    enable: false,\r\n                    speed: 40,\r\n                    size_min: 0.1,\r\n                    sync: false\r\n                }\r\n            },\r\n            line_linked: {\r\n                enable: true,\r\n                distance: 50,\r\n                color: \"#fff\",\r\n                opacity: 0.5,\r\n                width: 1\r\n            },\r\n            move: {\r\n                enable: true,\r\n                speed: 3,\r\n                direction: \"none\",\r\n                random: false,\r\n                straight: false,\r\n                out_mode: \"out\",\r\n                bounce: false,\r\n                attract: {\r\n                    enable: false,\r\n                    rotateX: 600,\r\n                    rotateY: 1200\r\n                }\r\n            }\r\n        },\r\n        retina_detect: true\r\n    }\r\n}\r\n\r\nmodule.exports = configs;","import axios from \"axios\";\r\n\r\nconst baseURL = \"https://pokeapi.co/api/v2/\";\r\n\r\nexport default {\r\n    // Gets all pokemon in the API database for random pokemon.\r\n    getAllPokemon: () => {\r\n        return axios.get(`${baseURL}pokemon/?limit=898`)\r\n    },\r\n    // Gets pokemon data for any link sent by the API\r\n    getPokemonData: (url) => {\r\n        return axios.get(url);\r\n    },\r\n    // Gets pokemon data for a specific pokemon by name or number\r\n    getOnePokemon: (query) => {\r\n        return axios.get(`${baseURL}pokemon/${query}`);\r\n    },\r\n    // Gets the list of pokemon between a range\r\n    getPokemonRange: (limit, offset) => {\r\n        return axios.get(`${baseURL}pokemon/?limit=${limit}&offset=${offset}`)\r\n    }\r\n}\r\n"],"sourceRoot":""}