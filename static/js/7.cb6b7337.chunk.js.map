{"version":3,"sources":["pages/Home.js","components/NavBar.js","components/Wrapper.js","utils/backgroundConfig.js","utils/API.js"],"names":["Home","useState","show","setShow","searchValue","setSearchValue","name","setName","num","setNum","history","useHistory","configs","defaultConfig","config","setConfig","changePage","e","poke","preventDefault","push","handleButtonClick","a","API","getAllPokemon","pokemon","Math","floor","random","data","results","length","upperCase","charAt","toUpperCase","slice","searchType","type","searchString","toLowerCase","replace","getOnePokemon","theme","className","md","variant","size","onClick","handlePokedexClick","handleRandomClick","onHide","Header","Title","onSubmit","handleSearchFormSubmit","Body","Label","Control","value","onChange","target","placeholder","Footer","fixed","Collapse","Text","style","color","Date","getFullYear","href","NavBar","expand","Brand","Wrapper","id","options","module","exports","background","position","repeat","fullScreen","enable","zIndex","fpsLimit","particles","number","density","value_area","shape","stroke","width","polygon","nb_sides","image","src","height","opacity","anim","speed","opacity_min","sync","size_min","line_linked","distance","move","direction","straight","out_mode","bounce","attract","rotateX","rotateY","retina_detect","baseURL","axios","get","getPokemonData","url","query","getPokemonRange","limit","offset"],"mappings":"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","file":"static/js/7.cb6b7337.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Container, Row, Col, Button, Jumbotron, Modal, Form, Navbar } from 'react-bootstrap';\r\nimport NavBar from '../components/NavBar';\r\nimport Wrapper from \"../components/Wrapper\";\r\nimport configs from \"../utils/backgroundConfig\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport API from \"../utils/API\";\r\nimport \"../style.css\";\r\n\r\nexport default function Home() {\r\n\r\n    // State Management\r\n    const [show, setShow] = useState(false);\r\n    const [searchValue, setSearchValue] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n    const [num, setNum] = useState(\"\");\r\n    const history = useHistory();\r\n    const [config, setConfig] = useState(configs.defaultConfig);\r\n\r\n    // Function to change to pokemon info page.\r\n    const changePage = (e, poke) => {\r\n        e.preventDefault();\r\n\r\n        // Pushes route into search bar.\r\n        history.push(`/info/${poke}`);\r\n    };\r\n\r\n    // Function to change to pokedex page.\r\n    const handlePokedexClick = (e) => {\r\n        e.preventDefault();\r\n\r\n        // Pushes route into search bar.\r\n        history.push(\"/pokedex\");\r\n    };\r\n\r\n    // Modal Functions\r\n    const handleButtonClick = () => {\r\n\r\n        if (show === false) {\r\n            setShow(true);\r\n        } else {\r\n            setShow(false);\r\n        }\r\n    }\r\n\r\n    // Function to find random pokemon\r\n    async function handleRandomClick(e) {\r\n        e.preventDefault();\r\n\r\n        let pokemon = await API.getAllPokemon();\r\n\r\n        // Generate random number based on size of array.\r\n        // Grab a random array value.\r\n        // Capitilize the first letter of the name.\r\n        let num = Math.floor(Math.random() * pokemon.data.results.length);\r\n        let random = pokemon.data.results[num];\r\n        let upperCase = random.name.charAt(0).toUpperCase() + random.name.slice(1);\r\n\r\n        // Send pokemon name to info page\r\n        changePage(e, upperCase);\r\n    };\r\n\r\n    // Function to set the type of search to either name or number.\r\n    const searchType = (e, type) => {\r\n        e.preventDefault();\r\n\r\n        if (type === \"name\") {\r\n            setSearchValue(\"name\");\r\n        } else if (type === \"number\") {\r\n            setSearchValue(\"number\");\r\n        }\r\n    };\r\n\r\n    // Function to find pokemon by search\r\n    async function handleSearchFormSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        if (searchValue === \"name\") {\r\n\r\n            // Lowercase search query and remove white space\r\n            // Capitilize the first letter of the name.\r\n            let searchString = name.toLowerCase().replace(/\\s+/g, '')\r\n            let pokemon = await API.getOnePokemon(searchString);\r\n            let upperCase = pokemon.data.name.charAt(0).toUpperCase() + pokemon.data.name.slice(1);\r\n\r\n            // Send pokemon name to info page\r\n            changePage(e, upperCase);\r\n\r\n        } else if (searchValue === \"number\") {\r\n\r\n            // Lowercase search query and remove white space\r\n            // Capitilize the first letter of the name.\r\n            let pokemon = await API.getOnePokemon(num);\r\n            let upperCase = pokemon.data.name.charAt(0).toUpperCase() + pokemon.data.name.slice(1);\r\n\r\n            // Send pokemon name to info page\r\n            changePage(e, upperCase);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Wrapper config={config} setConfig={setConfig} />\r\n            <NavBar theme=\"default\" />\r\n            <Container>\r\n                <Row className=\"justify-content-md-center\">\r\n                    <Col md=\"auto\" className=\"centerText\">\r\n                        <Jumbotron className=\"homeCardStyle\">\r\n                            <Container>\r\n                                <h1 className=\"pixelText white\">Pokedex</h1>\r\n                                <h6 className=\"pixelText white\">Fully updated with all Pokemon from Gen I - Gen VIII</h6>\r\n                                <br />\r\n                                <div>\r\n                                    <Button\r\n                                        className=\"pixelText marg10\"\r\n                                        type=\"button\"\r\n                                        variant=\"danger\"\r\n                                        size=\"lg\"\r\n                                        onClick={(e) => handlePokedexClick(e)}>\r\n                                        Full Pokedex\r\n                                    </Button>\r\n                                    <Button\r\n                                        className=\"pixelText marg10\"\r\n                                        type=\"button\"\r\n                                        variant=\"danger\"\r\n                                        size=\"lg\"\r\n                                        onClick={(e) => handleRandomClick(e)}>\r\n                                        Surprise Me\r\n                                    </Button>\r\n                                    <Button\r\n                                        className=\"pixelText marg10\"\r\n                                        type=\"button\"\r\n                                        variant=\"danger\"\r\n                                        size=\"lg\"\r\n                                        onClick={() => handleButtonClick()}>\r\n                                        Search by Name/Number\r\n                                    </Button>\r\n                                </div>\r\n                            </Container>\r\n                        </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n                <Modal show={show} onHide={() => handleButtonClick()}>\r\n                    <Modal.Header className=\"modalHead\" >\r\n                        <Modal.Title className=\"pixelText white\">Pokemon Search</Modal.Title>\r\n                    </Modal.Header>\r\n                    <form onSubmit={(e) => handleSearchFormSubmit(e)}>\r\n                        <Modal.Body className=\"modalHead white\">\r\n                            <Form>\r\n                                <Row>\r\n                                    <Col className=\"modalBorder\">\r\n                                        <Form.Label className=\"defaultText mr10\"><u>By Name</u></Form.Label>\r\n                                        <Form.Control\r\n                                            onClick={(e) => searchType(e, \"name\")}\r\n                                            value={name}\r\n                                            onChange={(e) => setName(e.target.value)}\r\n                                            type=\"text\"\r\n                                            placeholder=\"Name\"\r\n                                        />\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Form.Label className=\"defaultText mr10\"><u>By Number</u></Form.Label>\r\n                                        <Form.Control\r\n                                            onClick={(e) => searchType(e, \"number\")}\r\n                                            value={num}\r\n                                            onChange={(e) => setNum(e.target.value)}\r\n                                            type=\"text\"\r\n                                            placeholder=\"Number\"\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            </Form>\r\n                        </Modal.Body>\r\n                        <Modal.Footer className=\"defaultText modalHead\">\r\n                            <Button type=\"submit\" variant=\"danger\">Search!</Button>\r\n                        </Modal.Footer>\r\n                    </form>\r\n                </Modal>\r\n            </Container>\r\n            <Navbar fixed=\"bottom\" className=\"defaultText footerColor\">\r\n                <Navbar.Collapse className=\"justify-content-end\">\r\n                    <Navbar.Text style={{ color: \"white\" }}>\r\n                        &copy; {new Date().getFullYear()} Copyright: <a href=\"https://github.com/jmasone15\" style={{ color: \"white\" }}> Jordan Masone </a>\r\n                    </Navbar.Text>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </div >\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Navbar } from 'react-bootstrap'\r\n\r\nexport default function NavBar() {\r\n    return (\r\n        <Navbar variant=\"dark\" expand=\"lg0\" className=\"defaultText footerColor\">\r\n            <Navbar.Brand href=\"/\">React Pokedex</Navbar.Brand>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\n// Red #E5383B\r\n// Dark Grey #495057\r\n// Light Grey #6c757d\r\n","import React from \"react\";\r\nimport Particles from \"react-tsparticles\";\r\n\r\nexport default function Wrapper({ config }) {\r\n\r\n    return (\r\n        <Particles id=\"tsparticles\" options={config} />\r\n    )\r\n}\r\n","// Configs for the moving background\r\nconst configs = {\r\n    defaultConfig: {\r\n        background: {\r\n            color: {\r\n                value: \"#495057\"\r\n            },\r\n            position: \"50% 50%\",\r\n            repeat: \"no-repeat\",\r\n            size: \"cover\"\r\n        },\r\n        fullScreen: {\r\n            enable: true,\r\n            zIndex: -1\r\n        },\r\n        fpsLimit: 60,\r\n        particles: {\r\n            number: {\r\n                value: 60,\r\n                density: {\r\n                    enable: true,\r\n                    value_area: 1000\r\n                }\r\n            },\r\n            color: {\r\n                value: [\"#e63946\", \"#ffffff\"]\r\n            },\r\n            shape: {\r\n                type: \"edge\",\r\n                stroke: {\r\n                    width: 0,\r\n                    color: \"#000000\"\r\n                },\r\n                polygon: {\r\n                    nb_sides: 5\r\n                },\r\n                image: {\r\n                    src: \"img/github.svg\",\r\n                    width: 100,\r\n                    height: 100\r\n                }\r\n            },\r\n            opacity: {\r\n                value: 0.5,\r\n                random: false,\r\n                anim: {\r\n                    enable: false,\r\n                    speed: 1,\r\n                    opacity_min: 0.1,\r\n                    sync: false\r\n                }\r\n            },\r\n            size: {\r\n                value: 4,\r\n                random: true,\r\n                anim: {\r\n                    enable: false,\r\n                    speed: 40,\r\n                    size_min: 0.1,\r\n                    sync: false\r\n                }\r\n            },\r\n            line_linked: {\r\n                enable: true,\r\n                distance: 50,\r\n                color: \"#fff\",\r\n                opacity: 0.5,\r\n                width: 1\r\n            },\r\n            move: {\r\n                enable: true,\r\n                speed: 3,\r\n                direction: \"none\",\r\n                random: false,\r\n                straight: false,\r\n                out_mode: \"out\",\r\n                bounce: false,\r\n                attract: {\r\n                    enable: false,\r\n                    rotateX: 600,\r\n                    rotateY: 1200\r\n                }\r\n            }\r\n        },\r\n        retina_detect: true\r\n    }\r\n}\r\n\r\nmodule.exports = configs;","import axios from \"axios\";\r\n\r\nconst baseURL = \"https://pokeapi.co/api/v2/\";\r\n\r\nexport default {\r\n    // Gets all pokemon in the API database for random pokemon.\r\n    getAllPokemon: () => {\r\n        return axios.get(`${baseURL}pokemon/?limit=898`)\r\n    },\r\n    // Gets pokemon data for any link sent by the API\r\n    getPokemonData: (url) => {\r\n        return axios.get(url);\r\n    },\r\n    // Gets pokemon data for a specific pokemon by name or number\r\n    getOnePokemon: (query) => {\r\n        return axios.get(`${baseURL}pokemon/${query}`);\r\n    },\r\n    // Gets the list of pokemon between a range\r\n    getPokemonRange: (limit, offset) => {\r\n        return axios.get(`${baseURL}pokemon/?limit=${limit}&offset=${offset}`)\r\n    }\r\n}\r\n"],"sourceRoot":""}