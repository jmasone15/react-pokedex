{"version":3,"sources":["components/TypeBadge.js","components/StatsTable.js","components/Description.js","components/EvoChain.js","components/Footer.js","pages/Pokemon.js","components/NavBar.js","components/Wrapper.js","utils/backgroundConfig.js","utils/API.js"],"names":["TypeBadge","pokeType","pokeType2","pokeTypeBadge","type","style","marginRight","className","StatsTable","info","Jumbotron","Container","Table","stats","base_stat","Description","EvoChain","cardStyle","evo1","evo2","evo3","changePokePage","Row","Col","sm","src","sprites","front_default","alt","name","onClick","e","charAt","toUpperCase","slice","size","icon","faArrowAltCircleRight","Footer","Navbar","sticky","Collapse","Text","color","Date","getFullYear","href","Pokemon","useState","setInfo","show","setShow","pokeName","setPokeName","setPokeType","setPokeType2","description","setDescription","setEvo1","setEvo2","setEvo3","history","useHistory","configs","defaultConfig","config","setConfig","poke","useLocation","pathname","getPokeDescription","url","API","getPokemonData","then","res","descArray","data","flavor_text_entries","i","length","language","flavor_text","getPokeEvolution","evolution_chain","undefined","chain","species","getEvoData","evolves_to","num","getOnePokemon","useEffect","p","searchString","toLowerCase","replace","types","getPokeData","Wrapper","NavBar","theme","marginTop","md","textAlign","xl","id","Image","height","width","rounded","back_default","preventDefault","push","window","location","reload","variant","expand","Brand","options","module","exports","background","value","position","repeat","fullScreen","enable","zIndex","fpsLimit","particles","number","density","value_area","shape","stroke","polygon","nb_sides","image","opacity","random","anim","speed","opacity_min","sync","size_min","line_linked","distance","move","direction","straight","out_mode","bounce","attract","rotateX","rotateY","retina_detect","baseURL","getAllPokemon","axios","get","query","getPokemonRange","limit","offset"],"mappings":"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","file":"static/js/9.0de3b280.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function TypeBadge({ pokeType, pokeType2 }) {\r\n\r\n    const pokeTypeBadge = (type) => {\r\n        if (type === \"Normal\") {\r\n            return \"type normal\"\r\n        } else if (type === \"Fire\") {\r\n            return \"type fire\"\r\n        } else if (type === \"Water\") {\r\n            return \"type water\"\r\n        } else if (type === \"Grass\") {\r\n            return \"type grass\"\r\n        } else if (type === \"Electric\") {\r\n            return \"type electric\"\r\n        } else if (type === \"Ice\") {\r\n            return \"type ice\"\r\n        } else if (type === \"Poison\") {\r\n            return \"type poison\"\r\n        } else if (type === \"Fighting\") {\r\n            return \"type fighting\"\r\n        } else if (type === \"Ground\") {\r\n            return \"type ground\"\r\n        } else if (type === \"Flying\") {\r\n            return \"type flying\"\r\n        } else if (type === \"Psychic\") {\r\n            return \"type psychic\"\r\n        } else if (type === \"Bug\") {\r\n            return \"type bug\"\r\n        } else if (type === \"Rock\") {\r\n            return \"type rock\"\r\n        } else if (type === \"Ghost\") {\r\n            return \"type ghost\"\r\n        } else if (type === \"Dark\") {\r\n            return \"type dark\"\r\n        } else if (type === \"Dargon\") {\r\n            return \"type dragon\"\r\n        } else if (type === \"Steel\") {\r\n            return \"type steel\"\r\n        } else if (type === \"Fairy\") {\r\n            return \"type fairy\"\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                pokeType2 === \"\" && (\r\n                    <span style={{ marginRight: \"10px\" }} className={pokeTypeBadge(pokeType)}>{pokeType}</span>\r\n                )\r\n            }\r\n            {\r\n                pokeType2 !== \"\" && (\r\n                    <div>\r\n                        <span style={{ marginRight: \"10px\" }} className={pokeTypeBadge(pokeType)}>{pokeType}</span>\r\n                        <span style={{ marginRight: \"10px\" }} className={pokeTypeBadge(pokeType2)}>{pokeType2}</span>\r\n                    </div>)\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Jumbotron, Container, Table } from \"react-bootstrap\";\r\n\r\nexport default function StatsTable({ info }) {\r\n    return (\r\n        <Jumbotron className=\"cardStyle\">\r\n            <Container className=\"centerText\">\r\n                <h3 className=\"pixelText\"><u>Base Stats</u></h3>\r\n                <br /><br /><br />\r\n                <Table className=\"white\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <th><b>HP:</b></th>\r\n                            <th>{info.stats[0].base_stat}</th>\r\n                        </tr>\r\n                        <tr>\r\n                            <th><b>Attack:</b></th>\r\n                            <th>{info.stats[1].base_stat}</th>\r\n                        </tr>\r\n                        <tr>\r\n                            <th><b>Defense:</b></th>\r\n                            <th>{info.stats[2].base_stat}</th>\r\n                        </tr>\r\n                        <tr>\r\n                            <th><b>Special-Attack:</b></th>\r\n                            <th>{info.stats[3].base_stat}</th>\r\n                        </tr>\r\n                        <tr>\r\n                            <th><b>Special-Defense:</b></th>\r\n                            <th>{info.stats[4].base_stat}</th>\r\n                        </tr>\r\n                        <tr>\r\n                            <th><b>Speed</b></th>\r\n                            <th>{info.stats[5].base_stat}</th>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </Container>\r\n        </Jumbotron>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Container, Jumbotron } from 'react-bootstrap'\r\n\r\nexport default function Description({ info }) {\r\n    return (\r\n        <Jumbotron className=\"cardStyle\">\r\n            <h3 className=\"pixelText\"><u>Description</u></h3>\r\n            <Container>\r\n                <p className=\"defaultText fs25\">{info}</p>\r\n            </Container>\r\n        </Jumbotron>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Jumbotron, Container, Row, Col } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowAltCircleRight } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default function EvoChain({ cardStyle, evo1, evo2, evo3, changePokePage }) {\r\n\r\n    return (\r\n        <Jumbotron className=\"cardStyle\">\r\n            <Container className=\"centerText\">\r\n                <h3 className=\"pixelText\"><u>Evolution Line</u></h3>\r\n                <Row className=\"justify-content-md-center\">\r\n                    {evo1 !== \"empty\" && (\r\n                        <>\r\n                            <Col sm=\"auto\">\r\n                                <img\r\n                                    className=\"pointer\"\r\n                                    src={evo1.sprites.front_default}\r\n                                    alt={evo1.name}\r\n                                    onClick={(e) => changePokePage(e, evo1.name.charAt(0).toUpperCase() + evo1.name.slice(1))}\r\n                                />\r\n                                <h6>{evo1.name.charAt(0).toUpperCase() + evo1.name.slice(1)}</h6>\r\n                            </Col>\r\n                        </>\r\n                    )}\r\n                    {evo2 !== \"empty\" && (\r\n                        <>\r\n                            <Col sm=\"auto\" className=\"mt50\">\r\n                                <FontAwesomeIcon size=\"lg\" icon={faArrowAltCircleRight} />\r\n                            </Col>\r\n                            <Col sm=\"auto\">\r\n                                <img\r\n                                    className=\"pointer\"\r\n                                    src={evo2.sprites.front_default}\r\n                                    alt={evo2.name}\r\n                                    onClick={(e) => changePokePage(e, evo2.name.charAt(0).toUpperCase() + evo2.name.slice(1))}\r\n                                />\r\n                                <h6>{evo2.name.charAt(0).toUpperCase() + evo2.name.slice(1)}</h6>\r\n                            </Col>\r\n                        </>\r\n                    )}\r\n                    {evo3 !== \"empty\" && (\r\n                        <>\r\n                            <Col sm=\"auto\" className=\"mt50\">\r\n                                <FontAwesomeIcon size=\"lg\" icon={faArrowAltCircleRight} />\r\n                            </Col>\r\n                            <Col sm=\"auto\">\r\n                                <img\r\n                                    className=\"pointer\"\r\n                                    src={evo3.sprites.front_default}\r\n                                    alt={evo3.name}\r\n                                    onClick={(e) => changePokePage(e, evo3.name.charAt(0).toUpperCase() + evo3.name.slice(1))}\r\n                                />\r\n                                <h6>{evo3.name.charAt(0).toUpperCase() + evo3.name.slice(1)}</h6>\r\n                            </Col>\r\n                        </>\r\n                    )}\r\n                </Row>\r\n            </Container>\r\n        </Jumbotron>\r\n    )\r\n}","import React from 'react';\r\nimport { Navbar } from \"react-bootstrap\";\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <Navbar sticky=\"bottom\" className=\"defaultText footerColor\">\r\n            <Navbar.Collapse className=\"justify-content-end\">\r\n                <Navbar.Text style={{ color: \"white\" }}>\r\n                    &copy; {new Date().getFullYear()} Copyright: <a href=\"https://github.com/jmasone15\" style={{ color: \"white\" }}> Jordan Masone </a>\r\n                </Navbar.Text>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport { Container, Row, Col, Jumbotron, Image } from 'react-bootstrap';\nimport { useLocation } from 'react-router';\nimport NavBar from '../components/NavBar';\nimport API from '../utils/API';\nimport Wrapper from \"../components/Wrapper\";\nimport configs from \"../utils/backgroundConfig\";\nimport \"../style.css\";\nimport TypeBadge from '../components/TypeBadge';\nimport StatsTable from '../components/StatsTable';\nimport Description from '../components/Description';\nimport EvoChain from '../components/EvoChain';\nimport Footer from '../components/Footer';\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Pokemon() {\n\n    // State Management\n    const [info, setInfo] = useState({});\n    const [show, setShow] = useState(false);\n    const [pokeName, setPokeName] = useState(\"\");\n    const [pokeType, setPokeType] = useState(\"\");\n    const [pokeType2, setPokeType2] = useState(\"\");\n    const [description, setDescription] = useState({});\n    const [evo1, setEvo1] = useState(\"empty\");\n    const [evo2, setEvo2] = useState(\"empty\");\n    const [evo3, setEvo3] = useState(\"empty\");\n    const history = useHistory();\n    const [config, setConfig] = useState(configs.defaultConfig);\n\n    // Changes page for the evolution line.\n    const changePokePage = (e, poke) => {\n        e.preventDefault();\n\n        history.push(`/info/${poke}`);\n        window.location.reload();\n    };\n\n    // Gets pokemon name from the search bar.\n    const search = useLocation();\n    const poke = search.pathname.slice(6);\n\n    // Function to get data for a specific pokemon.\n    const getPokeData = (p) => {\n        // Lowercases first letter of pokemon name for the api search.\n        let searchString = p.toLowerCase().replace(/\\s+/g, '');\n\n        // Gets data on the pokemon that is searched for.\n        API.getOnePokemon(searchString).then((res) => {\n\n            // Sets data for specific pokemon.\n            setInfo(res.data);\n\n            // Error handling.\n            if (res.data.name !== undefined) {\n\n                // Sets pokemon name.\n                setPokeName(res.data.name.charAt(0).toUpperCase() + res.data.name.slice(1))\n\n                // Checks how many types the pokemon has, and then sets the state.\n                if (res.data.types.length > 1) {\n                    setPokeType(res.data.types[0].type.name.charAt(0).toUpperCase() + res.data.types[0].type.name.slice(1));\n                    setPokeType2(res.data.types[1].type.name.charAt(0).toUpperCase() + res.data.types[1].type.name.slice(1));\n                } else {\n                    setPokeType(res.data.types[0].type.name.charAt(0).toUpperCase() + res.data.types[0].type.name.slice(1));\n                }\n\n                // Calls function to get pokemon description.\n                getPokeDescription(res.data.species.url);\n\n            } else {\n                // If no response, do not show data.\n                setShow(false);\n            }\n        });\n    };\n\n    // Function to get description for specific pokemon.\n    const getPokeDescription = (url) => {\n\n        // API call that uses the url from the poke data Object.\n        API.getPokemonData(url).then((res) => {\n\n            // Array of all the different pokemon descriptions.\n            let descArray = res.data.flavor_text_entries;\n\n            // Loop that checks all of the descriptions from the API call.\n            // Picks the first one that is in English and breaks the loop.\n            for (let i = 0; i < descArray.length; i++) {\n                if (descArray[i].language.name === \"en\") {\n\n                    // Sets description to state.\n                    setDescription(descArray[i].flavor_text);\n\n                    // Calls function to get evolution line.\n                    getPokeEvolution(res.data.evolution_chain.url);\n\n                    break;\n                }\n\n            }\n        });\n    };\n\n    // Function to get evolution line for specific pokemon.\n    const getPokeEvolution = (url) => {\n\n        // API call that gets data for the desired evolution line.\n        API.getPokemonData(url).then((res) => {\n\n            // Checks to see how many evolutions the pokemon has.\n            // Calls the function to get the sprite for each evolution.\n            if (res.data.chain.species.name !== undefined) {\n                getEvoData(res.data.chain.species.name, 0);\n            }\n            if (res.data.chain.evolves_to[0] !== undefined) {\n                getEvoData(res.data.chain.evolves_to[0].species.name, 1);\n            }\n            if (res.data.chain.evolves_to[0] !== undefined && res.data.chain.evolves_to[0].evolves_to[0] !== undefined) {\n                getEvoData(res.data.chain.evolves_to[0].evolves_to[0].species.name)\n            }\n\n        });\n    };\n\n    // Function to get data for a specific evolution.\n    const getEvoData = (poke, num) => {\n\n        // API call to get data on for a specific pokemon.\n        API.getOnePokemon(poke).then((res) => {\n\n            // Sets the state for the evolutions based on how many there are.\n            // After setting state, show the data on the page.\n            if (num === 0) {\n                setEvo1(res.data);\n                setShow(true);\n            } else if (num === 1) {\n                setEvo2(res.data);\n                setShow(true);\n            } else {\n                setEvo3(res.data);\n                setShow(true);\n            }\n        });\n    };\n\n    // When the page loads calls first of three functions.\n    useEffect(() => {\n        getPokeData(poke);\n    }, []);\n\n    return (\n        <div>\n            <Wrapper config={config} setConfig={setConfig} />\n            <NavBar theme=\"default\" />\n            {show === true && (\n                <Container>\n                    <Container style={{ marginTop: \"50px\" }}>\n                        <Row className=\"justify-content-md-center\">\n                            <Col md=\"auto\" style={{ textAlign: \"center\" }}>\n                                <Container>\n                                    <Row>\n                                        <Col xl={12}>\n                                            <Jumbotron className=\"headerStyle\">\n                                                <Container>\n                                                    <h2 className=\"pixelText white\">{pokeName} #{info.id}</h2>\n                                                    <TypeBadge pokeType={pokeType} pokeType2={pokeType2} />\n                                                </Container>\n                                            </Jumbotron>\n                                        </Col>\n                                    </Row>\n                                    <Row className=\"justify-content-md-center mt50\">\n                                        <Col>\n                                            <Image src={info.sprites.front_default} style={{ height: \"200px\", width: \"200px\" }} alt={info.name} rounded />\n                                            <Image src={info.sprites.back_default} style={{ height: \"200px\", width: \"200px\" }} alt={info.name} rounded />\n                                        </Col>\n                                    </Row>\n                                </Container>\n                            </Col>\n                        </Row>\n                    </Container>\n                    <Container className=\"mt100\">\n                        <Row className=\"justify-content-md-center\">\n                            <Col md={4}>\n                                <StatsTable info={info} className=\"cardStyle\" />\n                            </Col>\n                            <Col md={8}>\n                                <Row className=\"justify-content-md-center\">\n                                    <Col md=\"auto\">\n                                        <Description info={description} className=\"cardStyle\" />\n                                    </Col>\n                                </Row>\n                                <Row className=\"justify-content-md-center\" md=\"auto\">\n                                    <Col>\n                                        <EvoChain className=\"cardStyle\" evo1={evo1} evo2={evo2} evo3={evo3} changePokePage={changePokePage} />\n                                    </Col>\n                                </Row>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Container>\n            )}\n            <Footer />\n        </div >\n    )\n}\n\n","import React from 'react'\r\nimport { Navbar } from 'react-bootstrap'\r\n\r\nexport default function NavBar() {\r\n    return (\r\n        <Navbar variant=\"dark\" expand=\"lg0\" className=\"defaultText footerColor\">\r\n            <Navbar.Brand href=\"/home\">React Pokedex</Navbar.Brand>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\n// Red #E5383B\r\n// Dark Grey #495057\r\n// Light Grey #6c757d\r\n","import React from \"react\";\r\nimport Particles from \"react-tsparticles\";\r\n\r\nexport default function Wrapper({ config }) {\r\n\r\n    return (\r\n        <Particles id=\"tsparticles\" options={config} />\r\n    )\r\n}\r\n","// Configs for the moving background\r\nconst configs = {\r\n    defaultConfig: {\r\n        background: {\r\n            color: {\r\n                value: \"#495057\"\r\n            },\r\n            position: \"50% 50%\",\r\n            repeat: \"no-repeat\",\r\n            size: \"cover\"\r\n        },\r\n        fullScreen: {\r\n            enable: true,\r\n            zIndex: -1\r\n        },\r\n        fpsLimit: 60,\r\n        particles: {\r\n            number: {\r\n                value: 60,\r\n                density: {\r\n                    enable: true,\r\n                    value_area: 1000\r\n                }\r\n            },\r\n            color: {\r\n                value: [\"#e63946\", \"#ffffff\"]\r\n            },\r\n            shape: {\r\n                type: \"edge\",\r\n                stroke: {\r\n                    width: 0,\r\n                    color: \"#000000\"\r\n                },\r\n                polygon: {\r\n                    nb_sides: 5\r\n                },\r\n                image: {\r\n                    src: \"img/github.svg\",\r\n                    width: 100,\r\n                    height: 100\r\n                }\r\n            },\r\n            opacity: {\r\n                value: 0.5,\r\n                random: false,\r\n                anim: {\r\n                    enable: false,\r\n                    speed: 1,\r\n                    opacity_min: 0.1,\r\n                    sync: false\r\n                }\r\n            },\r\n            size: {\r\n                value: 4,\r\n                random: true,\r\n                anim: {\r\n                    enable: false,\r\n                    speed: 40,\r\n                    size_min: 0.1,\r\n                    sync: false\r\n                }\r\n            },\r\n            line_linked: {\r\n                enable: true,\r\n                distance: 50,\r\n                color: \"#fff\",\r\n                opacity: 0.5,\r\n                width: 1\r\n            },\r\n            move: {\r\n                enable: true,\r\n                speed: 3,\r\n                direction: \"none\",\r\n                random: false,\r\n                straight: false,\r\n                out_mode: \"out\",\r\n                bounce: false,\r\n                attract: {\r\n                    enable: false,\r\n                    rotateX: 600,\r\n                    rotateY: 1200\r\n                }\r\n            }\r\n        },\r\n        retina_detect: true\r\n    }\r\n}\r\n\r\nmodule.exports = configs;","import axios from \"axios\";\r\n\r\nconst baseURL = \"https://pokeapi.co/api/v2/\";\r\n\r\nexport default {\r\n    // Gets all pokemon in the API database for random pokemon.\r\n    getAllPokemon: () => {\r\n        return axios.get(`${baseURL}pokemon/?limit=898`)\r\n    },\r\n    // Gets pokemon data for any link sent by the API\r\n    getPokemonData: (url) => {\r\n        return axios.get(url);\r\n    },\r\n    // Gets pokemon data for a specific pokemon by name or number\r\n    getOnePokemon: (query) => {\r\n        return axios.get(`${baseURL}pokemon/${query}`);\r\n    },\r\n    // Gets the list of pokemon between a range\r\n    getPokemonRange: (limit, offset) => {\r\n        return axios.get(`${baseURL}pokemon/?limit=${limit}&offset=${offset}`)\r\n    }\r\n}\r\n"],"sourceRoot":""}